(defmacro nth-expr (x &rest args)
  (let ((n (gensym)))
    `(let ((,n ,x))
       (labels ((get-nth (y list-of-values)
		  (if (= y 1)
		      (eval (car list-of-values))
		      (get-nth (- y 1) (cdr list-of-values)))))
	 (get-nth ,n ',args)))))
(defmacro nil! (x)
  `(setf ,x nil))
;(defun check-nth-expr ()
;  (let ((n 2))
;    (nth-expr n (/ 1 0) (+ 1 2) (/ 1 0))))