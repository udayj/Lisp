(defun identity1 (x)
  x)
(defun count-leaves1 (tree)
  (accumulate (lambda (x y) (+ (length_alt x) y)) 0 (map_alt #'flatten_alt tree)))
(defun flatten_alt (x)
  (cond ((nil? x) nil)
	((not(consp x)) (list x))
	(t (append (flatten_alt (car x)) (flatten_alt (cdr x))))))
(defun nil? (x)
  (equalp nil x))