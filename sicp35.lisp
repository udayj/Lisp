(defun estimate-area-circle (cx cy rad)
  (let ((predicate-circle (defun pc ()
			    (let ((x (random-in-range (- cx rad) (+ cx rad)))
				  (y (random-in-range (- cy rad) (+ cy rad))))
			  (let ((a1 (square (- cx x)))
				(a2 (square (- cy y)))
				(a3 (square rad)))
			    (<= (+ a1 a2) a3)))))
	(x1 (- cx rad))
	(y1 (- cy rad))
	(x2 (+ cx rad))
	(y2 (+ cy rad)))
    (estimate-integral x1 y1 x2 y2 predicate-circle)))
(defun random-in-range (low high)
  (let ((range (- high low)))
    (+ low (random range))))
(defun estimate-integral (x1 y1 x2 y2 predicate)
  (let ((area (* (- x2 x1) (- y2 y1))))
    (* area (monte-carlo 100 predicate))))
(defun monte-carlo (trials experiment)
  (let ((iter (defun iter-int(trials-rem trials-passed)
		(cond ((= 0 trials-rem) (/ trials-passed trials))
		      ((funcall experiment) (iter-int (- trials-rem 1) (+ trials-passed 1)))
		      (t (iter-int (- trials-rem 1) trials-passed))))))
    (funcall iter trials 0)))
  