(defun permutations (s)
  (if (nil? s)  (list nil)
      (flatmap (lambda (x)
		 (map_alt (lambda (p) (cons x p)) (permutations (remove x s))))
	       s)))
(defun flatmap (proc s)
  (accumulate #'append nil (map_alt proc s)))
(defun remove1 (x s)
  (filter (lambda (y) (not (= y x))) s))
(defun filter (predicate seq)
  (if (nil? seq) nil
      (if (funcall predicate (car seq)) 
	  (cons (car seq) (filter predicate (cdr seq)))
	  (filter predicate (cdr seq)))))