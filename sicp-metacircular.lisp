(defun eval (exp env)
  (cond ((self-evaluating? exp) exp)
	((variable? exp) (lookup-variable-value exp env))
	((quoted? exp) (text-of-quotation exp))
	((assignment? exp) (eval-assignment exp env))
	((definition? exp) (eval-definition exp env))
	((if? exp) (eval-if exp env))
	((lambda? exp) 
	 (make-procedure (lambda-parameters exp)
			 (lambda-body exp)
			 env))
	((begin? exp) 
	 (eval-sequence (begin-actions exp) env))
	((cond? exp) (eval (cond->if exp) env))
	((application? exp) 
	 (apply (eval (operator exp) env)
		(list-of-values (operands exp) env)))
	(t 'error)))
(defun apply (procedure arguments)
  (cond ((primitive-procedure? procedure)
	 (apply-primitive-procedure procedure arguments))
	((compound-procedure? procedure)
	 (eval-sequence
	  (procedure-body procedure)
	  (extend-environment
	   (procedure-parameters procedure)
	   arguments
	   (procedure-environment procedure))))
	(t 'error-proc-type)))
(defun list-of-values (exps env)
  (if (no-operands? exps) nil
      (cons (eval (first-operand exps) env)
	    (list-of-values (rest-operands exps) env))))
(defun eval-if (exp env)
  (if (true? (eval (if-predicate exp) env)) 
      (eval (if-consequent exp) env)
      (eval (if-alternative exp) env)))
(defun eval-sequence (exps env)
  (cond ((last-exp? exps) (eval (first-exp exps) env))
	(t (eval (first-exp exps) env)
	   (eval-sequence (rest-exps exps) env))))
(defun eval-assignment (exp env)
  (set-variable-value! (assignment-variable exp)
		       (eval (assignment-value exp) env)
		       env)
  'ok)
(defun eval-definition (exp env)
  (define-variable! (definition-variable exp)
      (eval (definition-value exp) env)
    env)
  'ok)
(defun self-evaluating? (exp)
  (cond ((number? exp) t)
	((string? exp) t)
	(t nil)))
(defun variable? (exp)
  (symbol? exp))
(defun quoted? (exp)
  (tagged-list? exp 'quote))
(defun text-of-quotation (exp)
  (cadr exp))
(defun tagged-list? (exp)
  (if (consp exp)
      (equalp (car exp) tag)
      nil))
(defun assignment? (exp)
  (tagged-list? exp 'set!))
(defun assignment-variable (exp)
  (cadr exp))
(defun assignment-value (exp)
  (caddr exp))
(defun definition? (exp)
  (tagged-list? exp 'define))
(defun definition-variable (exp)
  (if (symbol? (cadr exp))
      (cadr exp)
      (caadr exp)))
(defun definition-value (exp)
  (if (symbol? (cadr exp))
      (caddr exp)
      (make-lambda (cdadr exp)
		   (cddr exp))))
(defun lambda? (exp)
  (tagged-list? exp 'lambda))
(defun lambda-parameters (exp)
  (cadr exp)
(defun lambda-body (exp)
  (cddr exp))
(defun make-lambda (parameters body)
  (cons 'lambda (cons parameters body)))
(defun if? (exp)
  (tagged-list? exp 'if))
(defun if-predicate (exp)
  (cadr exp))
(defun if-consequent (exp)
  (caddr exp))
(defun if-alternative (exp)
  (if (not (equalp nil (cdddr exp)))
      (cadddr exp)
      nil))
(defun make-if (predicate consquent alternative)
  (list 'if predicate consequent alternative))
(defun begin? (exp)
  (tagged-list? exp 'begin))
(defun begin-actions (exp)
  (cdr exp))
(defun last-exp? (seq)
  (equalp nil (cdr seq)))
(defun first-exp (seq)
  (car seq))
(defun rest-exps (seq)
  (cdr seq))
(defun sequence->exp (seq)
  (cond ((equalp nil seq) seq)
	((last-exp? seq) (first-exp seq))
	(t make-begin seq)))
(defun make-begin (seq)
  (cons 'begin seq))
(defun application? (exp)
  (consp exp))
(defun operator (exp)
  (car exp))
(defun operands (exp)
  (cdr exp))
(defun no-operands? (ops)
  (equalp nil ops))
(defun first-operand (ops)
  (car ops))
(defun rest-operands (ops)
  (cdr ops))
(defun cond? (exp)
  (tagged-list? exp 'cond))
(defun cond-clauses (exp)
  (cdr exp))
(defun cond-else-clause? (exp)
  (equalp (cond-predicate exp) 'else))
(defun cond-predicate (clause)
  (car clause))
(defun cond-actions (clause)
  (cdr clause))
(defun cond->if (exp)
  (expand-clauses (cond-clauses exp)))
(defun expand-clauses (clauses)
  (if (equalp nil clauses) nil
      (let ((first (car clauses))
	    (rest (cdr clauses)))
	(if (cond-else-clause? first)
	    (if (equalp nil rest)
		(sequence->exp (cond-actions first))
		'error-else-clause-isnt-last)
	    (make-if (cond-predicate first)
		     (sequence->exp (cond-actions first))
		     (expand-clauses rest))))))
(defun true? (x)
  (not (equalp x nil)))
(defun false? (x)
  (equalp x nil))
(defun make-procedure (parameters body env)
  (cons 'procedure parameters body env))
(defun compound-procedure? (p)
  (tagged-list? p 'procedure))
(defun procedure-parameters (p)
  (cadr p))
(defun procedure-body (p)
  (caddr p))
(defun procedure-environment (p)
  (cadddr p))
(defun enclosing-environment (env)
  (cdr env))
(defun first-frame (env)
  (car env))
(defun the-empty-environment ()
  nil)
(defun make-frame (variables values)
  (cons variables values))
(defun frame-variables (frame)
  (car frame))
(defun frame-values (frame)
  (cdr frame))
(defun add-binding-to-frame! (var val frame)
  (rplaca frame (cons var (car frame)))
  (rplacd frame (cons val (cdr frame))))
(defun extend-environment (vars vals base-env)
  (cons (make-frame vars vales) base-env))
(defun lookup-variable-value (var env)
  (let 
      ((env-loop (defun env-loop-i (env)
		   (let
		       ((scan (defun scan-i (vars vals)
				(cond ((equalp nil vars) (env-loop-i (enclosing-environment env)))
				      ((equalp var (car vars)) (car vals))
				      (t (scan-i (cdr vars) (cdr vals))))))))
		     (if (equalp env nil) 'error-unbound-var
			 (let ((frame (first-frame env)))
			   (funcall scan (frame-variables frame) (frame-values frame)))))))
    (funcall env-loop env)))
(defun set-variable-value! (var val env)
  (let 
      ((env-loop (defun env-loop-i (env)
		   (let
		       ((scan (defun scan-i (vars vals)
				(cond ((equalp nil vars) (env-loop-i (enclosing-environment env)))
				      ((equalp var (car vars) (rplaca vals val)))
				      (t (scan-i (cdr vars) (cdr vals))))))))
		   (if (equalp env nil) 'error-unbound-var
		       (let ((frame (first-frame env)))
			 (funcall scan (frame-variables frame) (frame-values frame)))))))
    (funcall env-loop env)))
(defun define-variable! (var val env)
  (let ((frame (first-frame env)))
    (let ((scan (defun scan-i (vars vals)
		  (cond ((equalp nil vars) (add-binding-to-frame! var val frame))
			((equalp var (car vars)) (rplaca vals val))
			(t scan-i (cdr vars) (cdr vals))))))
      (funcall scan (frame-variables frame) (frame-values frame)))))
(defun setup-environment ()
  (let
      ((initial-env (extend-environment (primitive-procedure-names)
					(primitive-procedure-objects)
					(the-empty-environment))))
    (define-variable! 'true t initial-env)
    (define-variable! 'false nil initial-env)
    initial-env))
(defun the-global-environment ()
  (setup-environment))
(defun primitive-procedure? (proc)
  (tagged-list? proc 'primitive))
(defun primitive-implementation (proc)
  (cadr proc))
(defun primitive-procedures ()
  (list (list 'car #'car)
	(list 'cdr #'cdr)
	(list 'cons #'cons)))
(defun primitive-procedure-names ()
  (mapcar #'car (primitive-procedures)))
(defun primitive-procedure-objects ()
  (mapcar (lambda (proc) (list 'primitive (cadr proc))) (primitive-procedures)))
(defun apply-primitive-procedure (proc args)
  (apply-in-cl (primitive-implementation proc) args))


	

	       
