(defun element-of-set? (x set)
  (cond ((nil? set) nil)
	((= x (car set)) t)
	(t (element-of-set? x (cdr set)))))
(defun adjoin-set (x set)
  (if (element-of-set?  x set) set
      (append (list x) set)))
(defun intersection-set (set1 set2)
  (cond ((or (nil? set1) (nil? set2)) nil)
	((element-of-set? (car set1) set2) (cons (car set1) (intersection-set (cdr set1) set2)))
	(t (intersection-set (cdr set1) set2))))
(defun union-set (set1 set2)
  (append set1 (unique-elements set1 set2)))
(defun unique-elements (set1 set2)
  (if (nil? set2) nil
      (if (element-of-set? (car set2) set1) (unique-elements set1 (cdr set2))
	  (cons (car set2) (unique-elements set1 (cdr set2))))))
(defun adjoin-set-ordered (x set)
  (cond ((nil? set) (list x))
	((= x (car set)) set)
	((< x (car set)) (cons x set))
	(t (cons (car set) (adjoin-set-ordered x (cdr set))))))
(defun union-set-ordered (set1 set2)
  (cond ((nil? set1) set2)
	((nil? set2) set1)
	((< (car set1) (car set2)) (cons (car set1) (union-set-ordered (cdr set1) set2)))
	((> (car set1) (car set2)) (cons (car set2) (union-set-ordered set1 (cdr set2))))
	(t (cons (car set1) (union-set-ordered (cdr set1) (cdr set2))))))
(defun nil? (x)
  (equalp nil x))