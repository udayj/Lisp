(defun safe? (col board)
  (let ((pos (getRow col board)))
  (cond ((= col 1) t)
	(t (and (not (same-row pos (cdr (reverse board)))) (not (common-diagonal col board)))))))
(defun same-row (pos board)
  (cond ((nil? board) nil)
	((= pos (car board)) t)
	(t (same-row pos (cdr board)))))
(defun getRow (col board)
  (if (=  col 1) (car board)
      (getRow (- col 1) (cdr board))))
(defun common-diagonal (col board)
  (let ((row (getRow col board))
	(ctr 0))
    (filter (lambda(x) (equalp t x))
    (map_alt (lambda (x) 
	       (incf ctr)
	       (or (= row (+ x (- col ctr))) (= row (- x (- col ctr)))))
	     (cdr (reverse board))))))
(defun queens-cols (k board-size)
  (if (= k 0) (list nil)
      (filter (lambda (positions) (safe? k positions))
	      (flatmap (lambda (rest-of-queens)
			 (map_alt (lambda(new-row) (append rest-of-queens (list new-row)))
				  (enumerate-interval 1 board-size)))
		       (queens-cols (- k 1) board-size)))))
(defun queens (board-size)
  (queens-cols board-size board-size))
