(defun dot-product (v w)
  (accumulate #'+ 0 (accumulate-n #'* 1 (append (list v) (list w)))))
(defun matrix-*-vector ( m v)
  (map_alt (lambda (x) ( dot-product x v)) m))
(defun transpose (m)
  (accumulate-n #'cons nil m))
(defun matrix-*-matrix (m n)
  (let ((trans (transpose n)))
    (map_alt (lambda (x) (map_alt (lambda (y) (dot-product x y)) trans)) m)))