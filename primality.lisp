(defun prime? (n)
  (= (findDivisor 2 n) n))
(defun findDivisor (a b)
  (cond ((> (* a a) b) b)
	((= 0 (mod b a)) a)
	(t (findDivisor (+ a 1) b))))
(defun sq (a)
  (* a a))
(defun inc (a)
  (+ a 1))
(defun tryit (a combiner b)
  (funcall combiner a b))
(defun accumulate (combine null-value term a next b filter)
  (cond ((> a b) null-value)
	((funcall filter a) (funcall combine (funcall term a)
				    (accumulate combine null-value term 
						(funcall next a) next b 
						filter)))
	(t (accumulate combine null-value term (funcall next a) 
		       next b filter))))
(defun func (a b)
  (tryit a #'+ b))
