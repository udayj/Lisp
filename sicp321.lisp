(defun front-ptr (queue)
  (car queue))
(defun rear-ptr (queue)
  (cdr queue))
(defun set-front-ptr (queue item)
  (rplaca queue item))
(defun set-rear-ptr (queue item)
  (rplacd queue item))
(defun empty-queue? (queue)
  (nil? (front-ptr queue)))
(defun make-queue ()
  (cons '() '()))
(defun front-queue (queue)
  (if (empty-queue? queue) 'empty-queue
      (car (front-ptr queue))))
(defun insert-queue (queue item)
  (let ((new-pair (cons item nil)))
    (cond ((empty-queue? queue)
	   (set-front-ptr queue new-pair)
	   (set-rear-ptr queue new-pair)
	   queue)
	  (t (rplacd (rear-ptr queue) new-pair)
	     (set-rear-ptr queue new-pair)
	     queue))))
(defun delete-queue (queue)
  (cond ((empty-queue? queue) 'empty-queue)
	(t (set-front-ptr queue (cdr (front-ptr queue)))
	   queue)))
(defun nil? (x)
  (equalp x nil))
(defun print-queue (queue)
  (front-ptr queue))
(defun make-queue-l ()
  (let* ((front-ptr nil)
	 (rear-ptr nil)
	 (front-queue-l
	 (lambda () 
	   (if (nil? front-ptr) 'empty-queue
	   (car front-ptr))))
	  (print-queue-l
	  (lambda ()
	    front-ptr))
	 (insert-queue-l 
	  (lambda (item)
	    (let ((new-pair (cons item nil)))
	      (cond ((equalp nil front-ptr) (setf front-ptr new-pair)
		     (setf rear-ptr new-pair)
		     (funcall print-queue-l))
		    (t (rplacd rear-ptr new-pair)
		       (setf rear-ptr new-pair)
		       (funcall print-queue-l))))))
	 (delete-queue-l
	  (lambda ()
	    (cond ((equalp front-ptr nil) 'empty-queue)
		  (t (setf front-ptr (cdr front-ptr))))))
	
	    
	 
	
    (dispatch (lambda (m)
      (cond ((equalp m 'insert-queue )
	     insert-queue-l)
	    ((equalp m 'delete-queue)
	    delete-queue-l)
	    (t front-queue-l)))))
    dispatch))
