(defun front-ptr-deque (queue)
  (car queue))
(defun rear-ptr-deque (queue)
  (cdr queue))
(defun set-front-ptr-deque (queue ptr)
  (rplaca queue ptr))
(defun set-rear-ptr-deque (queue ptr)
  (rplacd queue ptr))
(defun make-deque ()
  (cons nil nil))
(defun empty-deque? (queue)
  (equalp nil (front-ptr-deque queue)))
(defun front-deque (queue)
  (if (empty-deque? queue) 'empty-deque
      (cdr (front-ptr-deque queue))))
(defun rear-deque (queue)
  (if (empty-deque? queue) 'empty-deque
      (cdr (rear-ptr-deque queue))))
(defun front-insert-deque (queue item)
  (let ((new-item (cons (cons nil nil) item)))
    (cond ((empty-deque? queue) 
	   (set-front-ptr-deque queue new-item)
	   (set-rear-ptr-deque queue new-item)
	   (print-deque queue))
	  (t 
	   (rplaca (car (front-ptr-deque queue)) new-item)
	   (rplacd (car new-item) (front-ptr-deque queue))
	   (set-front-ptr-deque queue new-item)
	   (print-deque queue)))))
(defun rear-insert-deque (queue item)
  (let ((new-item (cons (cons nil nil) item)))
    (cond ((empty-deque? queue)
	   (set-front-ptr-deque queue new-item)
	   (set-rear-ptr-deque queue new-item)
	   (print-deque queue))
	  (t
	   (rplaca (car new-item) (rear-ptr-deque queue))
	   (rplacd (car (rear-ptr-deque queue)) new-item)
	   (set-rear-ptr-deque queue new-item)
	   (print-deque queue)))))
(defun front-delete-deque (queue)
  (cond ((empty-deque? queue) 'empty-deque)
	((equalp nil (cdar (front-ptr-deque queue)))
	 (set-front-ptr-deque queue nil)
	 (set-rear-ptr-deque queue nil)
	 (print-deque queue))
	(t
	 (let ((next (cdar (front-ptr-deque queue))))
	   (rplaca (car next) nil)
	   (set-front-ptr-deque queue next)
	   (print-deque queue)))))
(defun rear-delete-deque (queue)
  (cond ((empty-deque? queue) 'empty-deque)
	((equalp nil (cdar (front-ptr-deque queue)))
	 (set-front-ptr-deque queue nil)
	 (set-rear-ptr-deque queue nil)
	 (print-deque queue))
	(t
	 (let ((prev (caar (rear-ptr-deque queue))))
	   (rplacd (car prev) nil)
	   (set-rear-ptr-deque queue prev)
	   (print-deque queue)))))
(defun print-deque (queue)
  (print-deque1 (front-ptr-deque queue)))
(defun print-deque1 (queue)
  (if (equalp nil (cdar queue)) (list (cdr queue))
  (cons (cdr queue) (print-deque1 (cdar queue)))))
	 